ejercicio 1:
maximo del arreglo
array = [3, 1, 4, 1, 5, 9, 2, 6]

def max_array(array, length)
    i = 0
    max = 0
    while i < length
        if(max < array[i])
            max = array[i]
        i++
    return max

assembler: 
.data
array: .word 3 1 4 1 5 9 2 11
length: .word 8

.text
la a0, array #a0 tiene la direccion en memoria de donde empieza el arreglo
lw a1, length #a1 = length
jal ra, maximo #salto a maximo y guardo el pc en ra

li a7, 4 #printea
ecall
li a7, 93 #stopea
ecall

maximo:
li t0, 0 # iterador
lw t1, 0(a0) #maximo es igual al primer elem del array
#no hace falta escribir un jump por que el pc va directo a while luego de maximo

while:
addi a0, a0 4 #a0 + 4 para aumentar una posicion en memoria
addi t0, t0, 1 #iterador + 1

beq t0, a1, return #si iterado == length -> anda a return

lw t2, 0(a0) #asigno el valor a t2
blt t1, t2, CambiaMax #si max < t2 -> cambiamax
j while


return:
mv a0, t1 #copio en a0 max para que devuelva eso
ret  #jump a ra, que era la 4 linea masomenos

CambiaMax:
mv t1, t2 #max = length en la posicion
j while


ejercicio 2:
dado q y s vectores, copia q en s

def copia_array(q, s, length)
    i = 0
    while(i < length)
        s[i] = q[i]
    return s

assembler: 
.text:
la a0, arrayS
la a1, arrayQ
lw a2, length
jal ra, copia_array

li a7, 4 #printea
ecall

li a7, 93 #stopea
ecall

copia_array:
li t0, 0 #i = 0

while:
bge t0, a2, return
lw t1, 0(a1)
sw t1, 0(a0)
addi t0, t0, 1
addi a1, a1, 4
addi a0, a0, 4
j while
        
return:
    mv a0, t1
    ret

.data: 
arrayS: .word 0x00000003 0x00000001 0x00000004 0x00000001 
arrayQ: .word 0x00000005 0x00000003 0x00000001 0x00000001 
length: .word 0x00000004


Ejercicio 3:
copiar q en s, solo si el elem de q es par
def copia_par_array(q, s, length)
    i = 0
    while(i < length)
        if(q[i] % 2 == 0){
            s[i] = q[i]
        }
    return s

assembler:
.data
arrayQ: .word 1 2 3 4 5  6
arrayS: .word 1 1 1 1 1 1 
length: .word 6

.text
la a0, arrayS
la a1, arrayQ
lw a2, length
jal ra, CopiaPares

li a7, 4 #printea
ecall

li a7, 93 #stopea
ecall

CopiaPares:
li t0, 0 #iterador


while:
beq t0, a2, return
addi t0, t0, 1 #sumo uno al iteraador
lw t1, 0(a1) #t1 es igual al elemento en la direcccion a0
andi t2, t1, 1 #me quedo con el bit menos significativo de t1

beq t2, x0, reescribo #si t1 == 0 -> reescribo (por que en ese caso es par)
addi a0, a0, 4
addi a1, a1, 4 # aumento una palabra (una posicion) en el arreglo (paso a siguiente elem)
j while


reescribo:
sw t1, 0(a0) #guardo t1 en la posicion a0(arrayS)
addi a0, a0, 4
addi a1, a1, 4 # aumento una palabra (una posicion) en el arreglo (paso a siguiente elem)
j while

return:
ret

ejercicio 4:

def binary_search (array, elem, length)
    int arriba = length - 1
    int abajo = 0
    int medio 
    while(abajo <= arriba)
        medio = abajo + (arriba - abajo)/2 # si lo hciera mal como fausto, se me podria ir de rango (32 bts)

        if(array[medio] = elem)
            return medio

        if(array[medio] < elem)
            abajo = medio + 1
        else 
            arriba = medio - 1
    return medio

assembler:

.data
.data: 
array: .word 1 3 5 7 9 11 13 15 17 19
target: .word 17
length: .word 10

.text
la a0, array
lw a1, length
lw a2, target
jal ra, BinarySearch

li a7, 4 #printea
ecall

li a7, 93 #stopea
ecall

BinarySearch:
li t0, 0 #abajo = 0
addi t1, a1, -1 #arriba = length -1

while:
ble t1, t0, return #si abajo <= arriba -> return

mv t2, t0 #medio = abajo
sub t3, t1, t0 #t3 = arriba - abajo
srli t3, t3, 1 # t3= t3/2
add t2, t2, t3 # medio = abajo + (arriba - abajo)/2

mv t3, a0 #me guardo a0 
slli t4, t2, 2 #t4 = medio*4
add a0, a0, t4 # a0 = a0 + medio*4
lw t4, 0(a0) # t4 = array[medio]
mv a0, t3

beq t4, a2, return #si array[medio] = target -> return

blt t4, a2, abajo_medio #si array[medio] < target -> abajo_medio

mv t1, t2
j while

abajo_medio:
mv t0, t2
j while

return:
mv a0, t2
ret
    
ejercicio 5:

def fibonacci(n):
    if n == 1:
        return 1
    if n == 0:
        return 0
    else:
        a = n-1
        b = n-2
        return fibonacci(a) + fibonacci(b)

assembler:

.data
number: .word 2

.text
lw a1, number
jal ra, Fibonacci

li a7, 4 #printea
ecall

li a7, 93 #stopea
ecall

Fibonacci:
addi sp, sp, -12 #hago 3 espacios en el stack, empieza desde arriba por eso resto
sw ra , 0(sp)
sw a1, 4(sp)

addi t0 , zero , 1
beq t0, a1, then1
beq x0, a1, then2

addi a1, a1, -1

jal ra, Fibonacci #Fibonacci(n-1)
sw a0, 8(sp)

lw a1, 4(sp)
addi a1, a1, -2
jal ra, Fibonacci #Fibonacci(n-2)
sw a0, 4(sp)

lw ra, 0(sp) #vuelvo al ra original
# a a0 tengo que cargarle la suma de 4(sp) y 8(sp)
li a0, 0
lw t1, 4(sp)
lw t2, 8(sp)
add a0, t1, t2 #a0 es resfib(n-1) + resfib(n-2)

addi sp, sp, 12
ret

then1:
addi sp, sp, 12
li a0, 1
ret
    
then2:
addi sp, sp, 12
mv a0, x0
ret

ejercicio 6:
a-
def mul(n, m)
    i = 0
    total = 0
    while(i!=n)
        total += n
        i += 1
    return total

b- 
def factorial(n)
    if(n == 0)
        return 1
    else
        return mul(n, facttorial(n-1))
    
.text:
lw a0, numero
jal ra, factorial

li a7, 1 #printea
ecall

li a7, 93 #stopea
ecall

mul:
li t0, 0
li t3, 0 #acumulador
j whileW

whileW:
addi t0, t0, 1 #t0 += 1
add t3, t3, a0  

blt t0, t2, whileW #si t0 != t2 -> whileW 

mv a0, t3
ret

factorial:
addi sp, sp, -8
li t1, 1
sw ra, 0(sp)
sw a0, 4(sp)

bgt a0, t1, while # a0 > t1 -> while

#addi a0, a0, 1
ret


while:
addi a0, a0, -1
jal ra, factorial
mv t2, a0
lw t4, 0(sp) #quiero el ra anterior no el del factorial
lw a0, 4(sp) 
addi sp, sp, 8

jal ra, mul #multiplico a0 = t2 * a0
mv ra, t4
jr ra

.data
numero: .word 7

c) el problema es que para


ejercicio 7:
.text:
lw a0, numero
jal ra, sum

li a7, 1 #printea
ecall

li a7, 93 #stopea
ecall


sum:
addi sp, sp, -8
sw ra, 0(sp)
sw a0, 4(sp)

bgt a0, x0, while # a0 > t1 -> while

#addi a0, a0, 1
ret


while:
addi a0, a0, -1
jal ra, sum
mv t2, a0
lw t4, 0(sp) #quiero el ra anterior no el del factorial
lw a0, 4(sp) 
addi sp, sp, 8

add a0, a0, t2
mv ra, t4
jr ra

.data
numero: .word 10

Parcial:
Ejercicio 1

.text:
lw a0, numero
jal ra, impares?

li a7, 1 #printea
ecall

li a7, 93 #stopea
ecall

impares?:
#creo 4 argumentos, y les asigno a cada uno un byte de la palabra
#a cada uno dependiendo de su lugar lo muevo a la derecha de modo
#que quede al principio
#luego a cada uno le hago and con 1, y hago beq a cada uno
#si son iguales a 1 voy a un target que le aÃ±ade 1 a a0

lw a1, mascara1
lw a2, mascara2
lw a3, mascara3
lw a4, mascara4

and t0, a0, a1
and t1, a0, a2
and t2, a0, a3
and t3, a0, a4

srli t3, t3, 24
srli t2, t2, 16
srli t1, t1, 8

andi t0, t0, 1
andi t1, t1, 1
andi t2, t2, 1
andi t3, t3, 1

li t4, 1
li a0, 0

ifs:
 
beq t0, t4, sumo1
beq t1, t4, sumo2
beq t2, t4, sumo3
beq t3, t4, sumo4

ret

sumo1:
addi a0, a0, 1
li t0, 0
j ifs

sumo2:
addi a0, a0, 1
li t1, 0
j ifs

sumo3:
addi a0, a0, 1
li t2, 0
j ifs

sumo4:
addi a0, a0, 1
li t3, 0
j ifs
    
.data
numero: .byte 0x37 0x05 0x01 0x02
mascara1: .byte 0xff 0x00 0x00 0x00
mascara2: .byte 0x00 0xff 0x00 0x00
mascara3: .byte 0x00 0x00 0xff 0x00
mascara4: .byte 0x00 0x00 0x00 0xff 


ejercicio 3:
.text:
la a0, mediciones
lw a1, largo
jal ra, DispMedicion

li a7, 1 #printea
ecall

li a7, 93 #stopea
ecall

DispMedicion:
li t0, 0 #iterador
li s0, 0x0f00 #valor para comparar
li t2, 0 #contador
li t3, 0x0000ffff

while:
lh t1, 0(a0) #indexo y guardo en t1

and t1, t1, t3

beq t0, a1, return #iterador == largo -> return
blt s0, t1, sumo

addi t0, t0, 1
addi a0, a0, 2
j while

sumo:
addi t0, t0, 1
addi t2, t2, 1
addi a0, a0, 2
j while

return:
mv a0, t2
ret
    
.data
mediciones: .half 0x1100 0x00F0 0x0200 0x0010 0x1100
largo: .byte 5




